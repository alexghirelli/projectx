//if we need full reset :  npx prisma db push --force-reset

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  onboardingEmailSent Boolean   @default(false)
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @map(name: "updated_at")
  accounts            Account[]
  sessions            Session[]

  stripeCustomerId       String?            @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?            @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?            @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?          @map(name: "stripe_current_period_end")
  Accounts               Accounts[]
  Workspaces             Workspace[]
  Investments            Investment[]
  Budgets                Budget[]
  Transactions           Transaction[]
  UserStocks             UserStocks[]
  RecurringPayments      RecurringPayment[]
  User_Workspaces        UserWorkspace[]

  @@map(name: "users")
}

model Workspace {
  id              String           @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  User_Workspaces UserWorkspace[]
  WorkspaceStocks WorkspaceStock[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([userId])
}

model UserWorkspace {
  userId      String    @map("user_id")
  workspaceId String    @map("workspace_id")
  role        String
  createdAt   DateTime  @default(now())
  User        User      @relation(fields: [userId], references: [id])
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
  @@index([userId])
  @@index([workspaceId])
}

model Investment {
  id           Int      @id
  userId       String // Link to the User model
  title        String
  name         String
  revenue      Decimal
  subscription Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Accounts {
  id                String             @id @default(cuid())
  userId            String // Link to the User model
  name              String
  type              String // e.g., Checking, Savings, Credit Card
  balance           Decimal
  creditLimit       Decimal?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  Transactions      Transaction[]
  User              User               @relation(fields: [userId], references: [id])
  RecurringPayments RecurringPayment[]

  @@index([userId])
}

model Transaction {
  id               String            @id @default(cuid())
  accountId        String // Link to the Accounts model
  amount           Decimal
  category         String?
  date             DateTime
  description      String?
  labelId          String? // Link to the Label model
  transactionType  String
  status           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  RecurringPayment RecurringPayment?
  Account          Accounts          @relation(fields: [accountId], references: [id])
  Label            Label?            @relation(fields: [labelId], references: [id])

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([userId])
  @@index([accountId])
  @@index([labelId])
}

model Budget {
  id             String   @id @default(cuid())
  userId         String // Link to the User model
  categoryId     String // Link to the Category model
  limit          Decimal
  startDate      DateTime
  endDate        DateTime
  actualSpending Decimal
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id])
  Category       Category @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id                String             @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  Labels            Label[]
  Budgets           Budget[]
  RecurringPayments RecurringPayment[]
}

model Label {
  id           String        @id @default(cuid())
  categoryId   String // Link to the Category model
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  Category     Category      @relation(fields: [categoryId], references: [id])
  Transactions Transaction[]

  @@index([categoryId])
}

model StockData {
  id              Int              @id
  title           String
  name            String
  currentPrice    Decimal
  openingPrice    Decimal
  closingPrice    Decimal
  dayHigh         Decimal
  dayLow          Decimal
  volume          Int
  marketCap       Decimal
  peRatio         Decimal
  dividendYield   Decimal
  updatedAt       DateTime         @default(now())
  UserStocks      UserStocks[]
  WorkspaceStocks WorkspaceStock[]
}

model UserStocks {
  userId               String    @map("user_id")
  stockDataId          Int       @map("stock_data_id")
  shares               Decimal
  averagePurchasePrice Decimal
  totalInvestment      Decimal
  currentValuation     Decimal
  profitLoss           Decimal
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  User                 User      @relation(fields: [userId], references: [id])
  StockData            StockData @relation(fields: [stockDataId], references: [id])

  @@id([userId, stockDataId])
  @@index([userId])
  @@index([stockDataId])
}

model WorkspaceStock {
  workspaceId String    @map("workspace_id")
  stockDataId Int       @map("stock_data_id")
  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  StockData   StockData @relation(fields: [stockDataId], references: [id])

  @@id([workspaceId, stockDataId])
  @@index([workspaceId])
  @@index([stockDataId])
}

model RecurringPayment {
  id                 String       @id @default(cuid())
  userId             String // Link to the User model
  accountId          String // Link to the Accounts model
  name               String
  amount             Decimal
  startDate          DateTime
  nextPaymentDate    DateTime
  frequency          String
  rangeFrom          DateTime?
  rangeTo            DateTime?
  totalSpentThisYear Decimal
  category           String // Link to the Category model
  lastTransactionId  String?      @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
  User               User         @relation(fields: [userId], references: [id])
  Account            Accounts     @relation(fields: [accountId], references: [id])
  CategoryRelation   Category     @relation(fields: [category], references: [id])
  LastTransaction    Transaction? @relation(fields: [lastTransactionId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([category])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}